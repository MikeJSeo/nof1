{
    "collab_server" : "",
    "contents" : "comparison <- function(x, response){\n  answer <-\n    if(response == \"poisson\" || response == \"binomial\"){\n      exp(x)\n    } else if(response == \"normal\"){\n      x\n    }\n  return(answer)\n}\n\nfind_raw_mean <- function(Y, Treat, baseline, response){\n\n  c(mean(Y[Treat == baseline], na.rm = TRUE), mean(Y[Treat == \"A\"], na.rm = TRUE), mean(Y[Treat == \"B\"], na.rm = TRUE))\n}\n\nround_raw_mean <- function(raw_mean, response){\n\n  if(response == \"poisson\" || response == \"normal\"){\n    round(raw_mean,1)\n  } else if(response == \"binomial\"){\n    round(raw_mean*100)\n  }\n}\n\nfind_mean_difference <- function(coef, response, raw_mean){\n\n  rounded <-\n  if(response == \"poisson\"){\n\n    round(\n    c(base_vs_scd = (exp(coef[\"beta_A\"]) - 1) * raw_mean[1], base_vs_mscd = (exp(coef[\"beta_B\"]) - 1) * raw_mean[1],\n     mscd_vs_scd = (exp(coef[\"beta_A\"] - coef[\"beta_B\"]) - 1) * raw_mean[3]), 1)\n\n  } else if (response == \"binomial\"){\n\n    round(\n    c(base_vs_scd = (raw_mean[1]/(1-raw_mean[1]) * exp(coef[\"beta_A\"])) / (1 + raw_mean[1]/(1-raw_mean[1]) * exp(coef[\"beta_A\"])) - raw_mean[1],\n      base_vs_mscd = (raw_mean[1]/(1-raw_mean[1]) * exp(coef[\"beta_B\"])) / (1 + raw_mean[1]/(1-raw_mean[1]) * exp(coef[\"beta_B\"])) - raw_mean[1],\n      mscd_vs_scd = (raw_mean[3]/(1-raw_mean[3]) * exp(coef[\"beta_A\"] - coef[\"beta_B\"])) / (1 + raw_mean[3]/(1-raw_mean[3]) * exp(coef[\"beta_A\"] - coef[\"beta_B\"])) - raw_mean[3]\n      ) * 100)\n  } else if (response == \"normal\"){\n\n    round(\n    c(base_vs_scd = coef[\"beta_A\"],\n      base_vs_mscd = coef[\"beta_B\"],\n      mscd_Vs_scd = coef[\"beta_A\"] - coef[\"beta_B\"]), 1)\n  }\n\n  if(response == \"binomial\"){\n    rounded[rounded==0] <- 1\n    rounded[rounded==100] <- 99\n  }\n  return(rounded)\n}\n\ncalculate_p_threshold <- function(samples, response){\n\n  upper <-\n    if(response == \"poisson\"){\n      1.1\n    } else if(response == \"binomial\"){\n      1.1\n    } else if(response == \"normal\"){\n      2.9\n    }\n\n  lower <-\n    if(response == \"poisson\"){\n      0.9\n    } else if(response == \"binomial\"){\n      0.9\n    } else if(response == \"normal\"){\n      -2.9\n    }\n\n  base_vs_scd <- list(greater_than_threshold = round(mean(comparison(samples[,\"beta_A\"], response) > upper, na.rm = TRUE)*100),\n                      lower_than_threshold = round(mean(comparison(samples[,\"beta_A\"], response) < lower, na.rm = TRUE)*100))\n\n  base_vs_mscd <- list(greater_than_threshold = round(mean(comparison(samples[,\"beta_B\"], response) > upper, na.rm = TRUE)*100),\n                      lower_than_threshold = round(mean(comparison(samples[,\"beta_B\"], response) < lower, na.rm = TRUE)*100))\n\n  mscd_vs_scd <- list(greater_than_threshold = round(mean(comparison(samples[,\"beta_A\"] - samples[,\"beta_B\"], response) > upper, na.rm = TRUE)*100),\n                        lower_than_threshold = round(mean(comparison(samples[,\"beta_A\"] - samples[,\"beta_B\"], response) < lower, na.rm = TRUE)*100))\n\n  change <- function(x){\n    x = ifelse(x==0,1,x)\n    x = ifelse(x==100,99,x)\n    return(x)\n  }\n  base_vs_scd <- rapply(base_vs_scd, change, how = \"replace\")\n  base_vs_mscd <- rapply(base_vs_mscd, change, how = \"replace\")\n  mscd_vs_scd <- rapply(mscd_vs_scd, change, how = \"replace\")\n\n  return(list(base_vs_scd = base_vs_scd, base_vs_mscd = base_vs_mscd, mscd_vs_scd = mscd_vs_scd))\n}\n\nsummarize_nof1 <- function(nof1, result, outcome){\n\n  with(c(nof1, result),{\n\n    samples <- do.call(rbind, samples)\n    raw_mean <- find_raw_mean(Y, Treat, baseline, response)\n    rounded_raw_mean <- round_raw_mean(raw_mean, response)\n\n    coef <- apply(samples[,c(\"beta_A\", \"beta_B\")], 2, mean)\n    diff <- find_mean_difference(coef, response, raw_mean)\n\n    raw_mean <- list(base = rounded_raw_mean[1], scd = rounded_raw_mean[2], mscd = rounded_raw_mean[3])\n    mean_difference <- list(base_vs_scd = diff[1], base_vs_mscd = diff[2], mscd_vs_scd = diff[3])\n    three_group_comparison <- list(raw_mean = raw_mean, mean_difference = mean_difference)\n\n    gauge_graph <- calculate_p_threshold(samples, response)\n    return(list(three_group_comparison = three_group_comparison, gauge_graph = gauge_graph))\n\n  })\n}\n\nwrap <- function(json.file){\n\n  read_data <- tryCatch({\n    read_input_data(json.file)\n  }, error = function(error){\n    return(paste(\"input read error: \", error))\n  })\n\n  stool_frequency <- tryCatch({\n    data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)\n    nof1 <- with(data, {\n      nof1.data(Y, Treat, baseline = \"baseline\", response = \"poisson\")\n    })\n    result <- nof1.run(nof1)\n    summarize_nof1(nof1, result, \"stool_frequency\")\n  }, error = function(error){\n    return(paste(\"stool_frequency run error: \", error))\n  })\n\n  stool_consistency <- tryCatch({\n    data <- list(Treat = read_data$Treatment, Y = read_data$stool_consistency)\n    nof1 <- with(data, {\n      nof1.data(Y, Treat, baseline = \"baseline\", response = \"binomial\")\n    })\n    result <- nof1.run(nof1)\n    summarize_nof1(nof1, result, \"stool_consistency\")\n  }, error = function(error){\n    return(paste(\"stool_consistency run error: \", error))\n  })\n\n  pain_interference <- tryCatch({\n    data <- list(Treat = read_data$Treatment_weekly, Y = read_data$pain_interference)\n    nof1 <- with(data, {\n      nof1.data(Y, Treat, baseline = \"baseline\", response = \"normal\")\n    })\n    result <- nof1.run(nof1)\n    summarize_nof1(nof1, result, \"pain_interference\")\n  }, error = function(error){\n    return(paste(\"pain_interference run error: \", error))\n  })\n\n  gi_symptoms <- tryCatch({\n    data <- list(Treat = read_data$Treatment_weekly, Y = read_data$gi_symptoms)\n    nof1 <- with(data, {\n      nof1.data(Y, Treat, baseline = \"baseline\", response = \"normal\")\n    })\n    result <- nof1.run(nof1)\n    summarize_nof1(nof1, result, \"gi_symptoms\")\n  }, error = function(error){\n    return(paste(\"gi_symptoms run error: \", error))\n  })\n\n  check_success <- function(x){\n    ifelse(is.list(x), TRUE, x)\n  }\n\n  tryCatch({\n  metadata <- list(successful_input_reading = check_success(read_data),\n                   successful_run_stool_frequency = check_success(stool_frequency),\n                   successful_run_stool_consistency = check_success(stool_consistency),\n                   successful_run_pain_interference = check_success(pain_interference),\n                   successful_run_gi_symptoms = check_success(gi_symptoms),\n                   user_id = 325,\n                   timestamp_trialist_completed = Sys.time(),\n                   trialist_version_id = 1,\n                   trialist_version_date = \"8/15/2017\",\n                   trialist_version_note = \"\")\n\n  base_vs_scd <- find_summary_graph(metadata, \"base_vs_scd\", stool_frequency, stool_consistency, pain_interference, gi_symptoms)\n  base_vs_mscd <- find_summary_graph(metadata, \"base_vs_mscd\", stool_frequency, stool_consistency, pain_interference, gi_symptoms)\n  mscd_vs_scd <- find_summary_graph(metadata, \"mscd_vs_scd\", stool_frequency, stool_consistency, pain_interference, gi_symptoms)\n  }, error = function(error){\n    return(paste(\"error in summary step:\", error))\n  })\n\n  summary_graph <- list(base_vs_scd = base_vs_scd, base_vs_mscd = base_vs_mscd, mscd_vs_scd = mscd_vs_scd)\n\n  final <- list(metadata = metadata, stool_frequency = stool_frequency, stool_consistency = stool_consistency,\n                pain_interference = pain_interference, gi_symptoms = gi_symptoms, summary_graph = summary_graph)\n\n  output <- toJSON(final, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE)\n  return(output)\n}\n\nfind_summary_graph <- function(metadata, treatment_comparison,stool_frequency, stool_consistency, pain_interference, gi_symptoms){\n\n  summary <- list()\n\n  if(metadata$successful_run_stool_frequency == TRUE){\n    a <- stool_frequency[[\"gauge_graph\"]][[treatment_comparison]][[\"greater_than_threshold\"]]\n    b <- stool_frequency[[\"gauge_graph\"]][[treatment_comparison]][[\"lower_than_threshold\"]]\n    summary$stool_frequency <- round(ifelse(a >= b, -a, b))\n  }\n\n  if(metadata$successful_run_stool_consistency == TRUE){\n    c <- stool_consistency[[\"gauge_graph\"]][[treatment_comparison]][[\"greater_than_threshold\"]]\n    d <- stool_consistency[[\"gauge_graph\"]][[treatment_comparison]][[\"lower_than_threshold\"]]\n    summary$stool_consistency <- round(ifelse(c >= d, -c, d))\n  }\n\n  if(metadata$successful_run_pain_interference == TRUE){\n    e <- pain_interference[[\"gauge_graph\"]][[treatment_comparison]][[\"greater_than_threshold\"]]\n    f <- pain_interference[[\"gauge_graph\"]][[treatment_comparison]][[\"lower_than_threshold\"]]\n    summary$pain_interference <- round(ifelse(e >= f, -e, f))\n  }\n\n  if(metadata$successful_run_gi_symptoms == TRUE){\n    g <- gi_symptoms[[\"gauge_graph\"]][[treatment_comparison]][[\"greater_than_threshold\"]]\n    h <- gi_symptoms[[\"gauge_graph\"]][[treatment_comparison]][[\"lower_than_threshold\"]]\n    summary$gi_symptoms <- round(ifelse(g >= h, -g, h))\n  }\n  return(summary)\n}\n\n",
    "created" : 1505921747711.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3007839730",
    "id" : "E01EE64",
    "lastKnownWriteTime" : 1505917388,
    "last_content_update" : 1505917388,
    "path" : "C:/Users/Michael Seo/Desktop/GitHub/nof1/R/nof1.wrap.R",
    "project_path" : "R/nof1.wrap.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}