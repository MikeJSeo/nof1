}
}
# if(!is.null(knots)){
#   mu[i] <- mu[i] + BS[i,] %*% gamma
# }
Y[i] <- rbinom(1,1, inv_logit(mu[i]))
}
list(Y = Y, Treat = Treat, Time = Time, knots = knots, nobs = nobs, BS = BS, epsilon = epsilon)
})
}
nof1.ordinal.simulation <- function(baseline = "baseline", knots = 126, Base.size = 14, Treat.size = 56,
rho = 0.3, prec = 5, beta_A = 0.5, beta_B = 1, cut = c(0.5,1,1.5,2),
ncat = 5, gamma = c(-4,-2,-3,-5)){
store <- generate_time(baseline, knots, Base.size, Treat.size)
with(store, {
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
# if(i == 1){
#   epsilon[1] <- rnorm(1, 0, sqrt(1/ ((1-rho^2) * prec)))
# } else{
#   epsilon[i] <- rnorm(1, rho * epsilon[i-1], sqrt(1/prec))
# }
mu[i] <- 0 #epsilon[i]
if(baseline %in% Treat){
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
} else if (Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
} else{
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
}
# if(!is.null(knots)){
#   mu[i] <- mu[i] + BS[i,] %*% gamma
# }
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat, Time = Time, knots = knots, nobs = nobs, BS = BS)
})
}
#input data generation
generate_data <- function(){
treatment <- c(rep("baseline", 2), rep("strict", 8), rep("liberalized", 8), rep("strict", 8), rep("liberalized", 8))
stool_consistency <- nof1.binomial.simulation()$Y
stool_frequency <- nof1.poisson.simulation()$Y
pain_interference <- nof1.normal.simulation()$Y
gi_symptoms <- nof1.normal.simulation()$Y
stool_consistency2 <- nof1.binomial.simulation()$Y
stool_frequency2 <- nof1.poisson.simulation()$Y
pain_interference2 <- nof1.normal.simulation()$Y
gi_symptoms2 <- nof1.normal.simulation()$Y
final <- list()
for(i in 1:(2+8*4)){
treatment_specific = treatment[i]
stool_consistency_changed <- stool_consistency[((i-1)*7+1):(i*7)]
stool_consistency_changed <- ifelse(stool_consistency_changed == 1, 7, 2)
parent_response = list(daily_stool_consistency = stool_consistency_changed,
daily_stool_frequency =  stool_frequency[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms[i])
)
stool_consistency2_changed <- stool_consistency2[((i-1)*7+1):(i*7)]
stool_consistency2_changed <- ifelse(stool_consistency2_changed == 1, 7, 2)
child_response = list(daily_stool_consistency = stool_consistency2_changed,
daily_stool_frequency =  stool_frequency2[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference2[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms2[i])
)
final[[i]] <- list(treatment = treatment_specific, parent_response = parent_response, child_response = child_response)
}
final2 <- list(data = final, metadata = list(user_id = 300000, user_age = 15, trial_start_date = "2017-01-01", trial_end_date = "2017-08-26"))
output <- toJSON(final2, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE)
return(output)
}
a <- generate_data()
a
remove(list = ls())
library(nof1)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
library(nof1)
library(nof1)
devtools::load_all(".")
library(nof1)
library(devtools)
install_github("MikeJSeo/nof1")
getwd()
payload <- fromJSON("sample input.json")
nof1.wrap("sample input.json")
library(devtools)
install_github("MikeJSeo/nof1")
library(nof1)
nof1.wrap("sample input.json")
wrap("sample input.json")
library(jsonlite)
library(TrialistNof1)
library(nof1)
wrap("sample input.json")
library(nof1)
wrap("sample input.json")
data <- fromJSON(json.file, flatten = TRUE)
data <- fromJSON("sample input.json", flatten = TRUE)
if(data$metadata$user_age < 14){
selection_names <- c("treatment", "parent_response.daily_stool_consistency", "parent_response.daily_stool_frequency",
"parent_response.promis_pain_interference", "parent_response.promis_gi_symptoms")
dataset <- data$data[,selection_names]
}else{
#null_count <- apply(data$data, 2, function(x){ sum(is.na(unlist(x)))})
selection_names <- c("treatment", "parent_response.daily_stool_consistency", "parent_response.daily_stool_frequency",
"parent_response.promis_pain_interference", "parent_response.promis_gi_symptoms")
dataset <- data$data[,selection_names]
}
data$data
selection_names <- c("treatment", "parent_response.daily_stool_consistency", "parent_response.daily_stool_frequency",
"parent_response.promis_pain_interference", "parent_response.promis_gi_symptoms")
dataset <- data$data[,selection_names]
names(data$data)
library(nof1)
wrap("sample input.json")
library(nof1)
json.file <- "sample input.json"
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
read_data
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
summarize_nof1(nof1, result, "stool_frequency")
str(read_data)
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
str(nof1)
result <- nof1.run(nof1)
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
summarize_nof1(nof1, result, "stool
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
data$Y
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
cat(nof1$code)
data$Treat
Treatment <- dataset[,"treatment"]
Treatment <- unlist(Treatment)
Treatment[Treatment == "strict"] = "A"
data$Treatment
Treatment
data <- fromJSON(json.file, flatten = TRUE)
if(data$metadata$user_age < 14){
selection_names <- c("treatment", "parent_response.daily_stool_consistency", "parent_response.daily_stool_frequency",
"parent_response.promis_pain_interference.t-score", "parent_response.promis_gi_symptoms.t-score")
dataset <- data$data[,selection_names]
}else{
#null_count <- apply(data$data, 2, function(x){ sum(is.na(unlist(x)))})
selection_names <- c("treatment", "parent_response.daily_stool_consistency", "parent_response.daily_stool_frequency",
"parent_response.promis_pain_interference.t-score", "parent_response.promis_gi_symptoms.t-score")
dataset <- data$data[,selection_names]
}
Treatment <- dataset[,"treatment"]
Treatment <- unlist(Treatment)
Treatment[Treatment == "strict"] = "A"
Treatment[Treatment == "liberalized"] = "B"
Treatment_weekly <- Treatment[seq(1, length(Treatment), 7)]
Treatment
dataset
data$parent_response.daily_stool_consistency
dataset[,"parent_response.daily_stool_consistency"]
nle(dataset[,"parent_response.daily_stool_consistency"])
dim(dataset[,"parent_response.daily_stool_consistency"])
length(dataset[,"parent_response.daily_stool_consistency"])
sapply(dataset[,"parent_response.daily_stool_consistency"], length)
length_each <- sapply(dataset[,"parent_response.daily_stool_consistency"], length)
Treatment <- dataset[,"treatment"]
Treatment <- unlist(Treatment)
Treatment[Treatment == "strict"] = "A"
Treatment[Treatment == "liberalized"] = "B"
length_each <- sapply(dataset[,"parent_response.daily_stool_consistency"], length)
Treat <- rep(Treatment, each = length_each)
help(rep)
Treat <- rep(Treatment, times = length_each)
Treat
library(nof1)
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
data
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
summarize_nof1(nof1, result, "stool_frequency")
knots
help(gelman.diag)
library(nof1)
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
stool_frequency <- tryCatch({
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
summarize_nof1(nof1, result, "stool_frequency")
}, error = function(error){
return(paste("stool_frequency run error: ", error))
})
knots
nof1.inits(nof1, 3)
str(nof1)
is.null(nof1$knots)
nof1.inits.binom.poisson <- function(nof1, n.chains){
with(nof1, {
Treat.matrix <- NULL
for(i in Treat.name){
Treat.matrix <- cbind(Treat.matrix, nof1[[paste0("Treat_", i)]])
}
if(response == "binomial"){
if(is.null(knots)){
model <- glm(Y ~ Treat.matrix, family = binomial(link = "logit"))
co <- coef(summary(model))
} else{
print("1")
model <- glm(Y ~ Treat.matrix + BS, family = binomial(link = "logit"))
co <- coef(summary(model))
}
} else if(response == "poisson"){
if(is.null(knots)){
model <- glm(Y ~ Treat.matrix, family = "poisson")
co <- coef(summary(model))
} else{
model <- glm(Y ~ Treat.matrix + BS, family = "poisson")
co <- coef(summary(model))
}
}
initial.values = list()
for(i in 1:n.chains){
initial.values[[i]] = list()
}
for(i in 1:n.chains){
initial.values[[i]][["alpha"]] <- co[1,1] + rnorm(1) *co[1,2]
for(j in 1:length(Treat.name)){
initial.values[[i]][[paste0("beta_", Treat.name[j])]] <- co[1+j,1] + rnorm(1) * co[1+j,2]
}
# if(!is.null(knots)){
#   for(j in 1:ncol(BS)){
#     initial.values[[i]][[paste0("gamma", j)]] <- co[1+length(Treat.name)+j, 1] + rnorm(1) * co[1+length(Treat.name)+j, 2]
#   }
# }
}
return(initial.values)
})
}
nof1.inits(nof1, 3)
nof1.inits.binom.poisson <- function(nof1, n.chains){
with(nof1, {
Treat.matrix <- NULL
for(i in Treat.name){
Treat.matrix <- cbind(Treat.matrix, nof1[[paste0("Treat_", i)]])
}
if(response == "binomial"){
if(is.null(knots)){
model <- glm(Y ~ Treat.matrix, family = binomial(link = "logit"))
co <- coef(summary(model))
} else{
print("1")
model <- glm(Y ~ Treat.matrix + BS, family = binomial(link = "logit"))
co <- coef(summary(model))
}
} else if(response == "poisson"){
if(is.null(knots)){
model <- glm(Y ~ Treat.matrix, family = "poisson")
co <- coef(summary(model))
} else{
print("1")
model <- glm(Y ~ Treat.matrix + BS, family = "poisson")
co <- coef(summary(model))
}
}
initial.values = list()
for(i in 1:n.chains){
initial.values[[i]] = list()
}
for(i in 1:n.chains){
initial.values[[i]][["alpha"]] <- co[1,1] + rnorm(1) *co[1,2]
for(j in 1:length(Treat.name)){
initial.values[[i]][[paste0("beta_", Treat.name[j])]] <- co[1+j,1] + rnorm(1) * co[1+j,2]
}
# if(!is.null(knots)){
#   for(j in 1:ncol(BS)){
#     initial.values[[i]][[paste0("gamma", j)]] <- co[1+length(Treat.name)+j, 1] + rnorm(1) * co[1+length(Treat.name)+j, 2]
#   }
# }
}
return(initial.values)
})
}
nof1.inits(nof1, 3)
nof1.inits.binom.poisson <- function(nof1, n.chains){
with(nof1, {
Treat.matrix <- NULL
for(i in Treat.name){
Treat.matrix <- cbind(Treat.matrix, nof1[[paste0("Treat_", i)]])
}
if(response == "binomial"){
if(is.null(knots)){
model <- glm(Y ~ Treat.matrix, family = binomial(link = "logit"))
co <- coef(summary(model))
}
# else{
#   model <- glm(Y ~ Treat.matrix + BS, family = binomial(link = "logit"))
#   co <- coef(summary(model))
# }
} else if(response == "poisson"){
if(is.null(knots)){
model <- glm(Y ~ Treat.matrix, family = "poisson")
co <- coef(summary(model))
}
# else{
#   model <- glm(Y ~ Treat.matrix + BS, family = "poisson")
#   co <- coef(summary(model))
# }
}
initial.values = list()
for(i in 1:n.chains){
initial.values[[i]] = list()
}
for(i in 1:n.chains){
initial.values[[i]][["alpha"]] <- co[1,1] + rnorm(1) *co[1,2]
for(j in 1:length(Treat.name)){
initial.values[[i]][[paste0("beta_", Treat.name[j])]] <- co[1+j,1] + rnorm(1) * co[1+j,2]
}
# if(!is.null(knots)){
#   for(j in 1:ncol(BS)){
#     initial.values[[i]][[paste0("gamma", j)]] <- co[1+length(Treat.name)+j, 1] + rnorm(1) * co[1+length(Treat.name)+j, 2]
#   }
# }
}
return(initial.values)
})
}
nof1.inits(nof1, 3)
library(nof1)
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
help(gelman.diag)
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
library(nof1)
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
if(is.null(knots)){
print("huh?")
model <- glm(Y ~ Treat.matrix, family = binomial(link = "logit"))
co <- coef(summary(model))
}
co
knots
is.null(knots)
is.na(knots)
library(nof1)
read_data <- tryCatch({
read_input_data(json.file)
}, error = function(error){
return(paste("input read error: ", error))
})
data <- list(Treat = read_data$Treatment, Y = read_data$stool_frequency)
nof1 <- with(data, {
nof1.data(Y, Treat, baseline = "baseline", response = "poisson")
})
result <- nof1.run(nof1)
a <- wrap()
a
a <- wrap("sample input.json")
a
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(nof1)
devtools::document()
a <- wrap("sample input.json")
a
library(nof1)
a <- wrap("sample input.json")
library(nof1)
library(nof1)
a <- wrap("sample input.json")
wrap
a <- wrap("sample input.json")
nof1.data
devtools::document()
devtools::load_all(".")
library(nof1)
nof1.wrap
library(nof1)
library(jsonlite)
library(nof1)
wrap("sample input.json")
remove(list =ls())
library(nof1)
ls()
nof1::wrap
wrap
library(jsonlite)
library(nof1)
wrap("sample input.json")
library(devtools)
install_github("MikeJSeo/nof1")
library(jsonlite)
library(nof1)
wrap("sample input.json")
library(devtools)
install_github("MikeJSeo/nof1")
library(jsonlite)
library(nof1)
wrap("sample input.json")
help(gelman.diag)
library(devtools)
install_github("MikeJSeo/nof1")
library(jsonlite)
library(nof1)
wrap("sample input.json")
library(nof1)
wrap
devtools::load_all(".")
devtools::document
devtools::document()
library(nof1)
wrap
devtools::document()
library(nof1)
library(nof1)
wrap
library(jsonlite)
library(nof1)
wrap("sample input.json")
remove(list = ls())
library(devtools)
install_github("MikeJSeo/nof1")
library(devtools)
install_github("MikeJSeo/nof1")
library(jsonlite)
library(nof1)
wrap("sample input.json")
wrap
wrap
library(nof1)
wrap
