devtools::load_all(".")
devtoools::load_all()
devtools::load_all()
comparison
devtools::load_all(".")
devtools::load_all(".")
coda
#input data generation
generate_data <- function(){
treatment <- c(rep("baseline", 2), rep("strict", 8), rep("liberalized", 8), rep("strict", 8), rep("liberalized", 8))
stool_consistency <- nof1.binomial.simulation()$Y
stool_frequency <- nof1.poisson.simulation()$Y
pain_interference <- nof1.normal.simulation()$Y
gi_symptoms <- nof1.normal.simulation()$Y
stool_consistency2 <- nof1.binomial.simulation()$Y
stool_frequency2 <- nof1.poisson.simulation()$Y
pain_interference2 <- nof1.normal.simulation()$Y
gi_symptoms2 <- nof1.normal.simulation()$Y
final <- list()
for(i in 1:(2+8*4)){
treatment_specific = treatment[i]
stool_consistency_changed <- stool_consistency[((i-1)*7+1):(i*7)]
stool_consistency_changed <- ifelse(stool_consistency_changed == 1, 7, 2)
parent_response = list(daily_stool_consistency = stool_consistency_changed,
daily_stool_frequency =  stool_frequency[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms[i])
)
stool_consistency2_changed <- stool_consistency2[((i-1)*7+1):(i*7)]
stool_consistency2_changed <- ifelse(stool_consistency2_changed == 1, 7, 2)
child_response = list(daily_stool_consistency = stool_consistency2_changed,
daily_stool_frequency =  stool_frequency2[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference2[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms2[i])
)
final[[i]] <- list(treatment = treatment_specific, parent_response = parent_response, child_response = child_response)
}
final2 <- list(data = final, metadata = list(user_id = 300000, user_age = 15, trial_start_date = "2017-01-01", trial_end_date = "2017-08-26"))
output <- toJSON(final2, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE)
return(output)
}
a <- generate_data()
library(nof1)
#input data generation
generate_data <- function(){
treatment <- c(rep("baseline", 2), rep("strict", 8), rep("liberalized", 8), rep("strict", 8), rep("liberalized", 8))
stool_consistency <- nof1.binomial.simulation()$Y
stool_frequency <- nof1.poisson.simulation()$Y
pain_interference <- nof1.normal.simulation()$Y
gi_symptoms <- nof1.normal.simulation()$Y
stool_consistency2 <- nof1.binomial.simulation()$Y
stool_frequency2 <- nof1.poisson.simulation()$Y
pain_interference2 <- nof1.normal.simulation()$Y
gi_symptoms2 <- nof1.normal.simulation()$Y
final <- list()
for(i in 1:(2+8*4)){
treatment_specific = treatment[i]
stool_consistency_changed <- stool_consistency[((i-1)*7+1):(i*7)]
stool_consistency_changed <- ifelse(stool_consistency_changed == 1, 7, 2)
parent_response = list(daily_stool_consistency = stool_consistency_changed,
daily_stool_frequency =  stool_frequency[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms[i])
)
stool_consistency2_changed <- stool_consistency2[((i-1)*7+1):(i*7)]
stool_consistency2_changed <- ifelse(stool_consistency2_changed == 1, 7, 2)
child_response = list(daily_stool_consistency = stool_consistency2_changed,
daily_stool_frequency =  stool_frequency2[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference2[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms2[i])
)
final[[i]] <- list(treatment = treatment_specific, parent_response = parent_response, child_response = child_response)
}
final2 <- list(data = final, metadata = list(user_id = 300000, user_age = 15, trial_start_date = "2017-01-01", trial_end_date = "2017-08-26"))
output <- toJSON(final2, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE)
return(output)
}
a <- generate_data()
#input data generation
generate_data <- function(){
treatment <- c(rep("baseline", 2), rep("strict", 8), rep("liberalized", 8), rep("strict", 8), rep("liberalized", 8))
stool_consistency <- nof1.binomial.simulation()$Y
stool_frequency <- nof1.poisson.simulation()$Y
pain_interference <- nof1.normal.simulation()$Y
gi_symptoms <- nof1.normal.simulation()$Y
stool_consistency2 <- nof1.binomial.simulation()$Y
stool_frequency2 <- nof1.poisson.simulation()$Y
pain_interference2 <- nof1.normal.simulation()$Y
gi_symptoms2 <- nof1.normal.simulation()$Y
final <- list()
for(i in 1:(2+8*4)){
treatment_specific = treatment[i]
stool_consistency_changed <- stool_consistency[((i-1)*7+1):(i*7)]
stool_consistency_changed <- ifelse(stool_consistency_changed == 1, 7, 2)
parent_response = list(daily_stool_consistency = stool_consistency_changed,
daily_stool_frequency =  stool_frequency[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms[i])
)
stool_consistency2_changed <- stool_consistency2[((i-1)*7+1):(i*7)]
stool_consistency2_changed <- ifelse(stool_consistency2_changed == 1, 7, 2)
child_response = list(daily_stool_consistency = stool_consistency2_changed,
daily_stool_frequency =  stool_frequency2[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference2[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms2[i])
)
final[[i]] <- list(treatment = treatment_specific, parent_response = parent_response, child_response = child_response)
}
final2 <- list(data = final, metadata = list(user_id = 300000, user_age = 15, trial_start_date = "2017-01-01", trial_end_date = "2017-08-26"))
output <- toJSON(final2, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE)
return(output)
}
a <- generate_data()
inv_logit <- function(a){
exp(a)/(1 + exp(a))
}
generate_time <- function(baseline, knots, Base.size, Treat.size){
if(is.null(baseline)){
Treat <- c(rep(c("A", "B", "A", "B"), each = Treat.size))
} else{
Treat <- rep(baseline, Base.size)
Treat <- c(Treat, rep(c("A", "B", "A", "B"), each = Treat.size))
}
Time <- 1:length(Treat)
nobs <- length(Time)
cen.Time <- (Time - mean(Time, na.rm = TRUE)) /sd(Time, na.rm = TRUE)
cen.knots <- (knots - mean(Time, na.rm = TRUE)) / sd(Time, na.rm = TRUE)
BS <- bs(cen.Time, knots = cen.knots)
return(list(Treat = Treat, BS = BS, nobs = nobs, Time = Time, cen.Time = cen.Time, cen.knots = cen.knots))
}
nof1.normal.simulation <- function(baseline = "baseline", knots = 126, Base.size = 2, Treat.size = 8,
rho = 0.3, prec = 0.5, alpha = 50, beta_A = 10, beta_B = 20,
gamma = c(-4,-2,-3,-5)){
store <- generate_time(baseline, knots, Base.size, Treat.size)
with(store, {
Y <- epsilon <- mu <- m <- rep(NA, nobs)
for(i in 1:nobs){
# if(i == 1){
#   epsilon[1] <- rnorm(1, 0, sqrt(1/ ((1-rho^2) * prec)))
# } else{
#   epsilon[i] <- Y[i-1] - mu[i-1]
# }
mu[i] <- alpha
# if(!is.null(knots)){
#   mu[i] <- mu[i] + BS[i,] %*% gamma
# }
if(is.null(baseline)){
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
} else{
if(baseline %in% Treat){
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
} else if (Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
}
}
m[i] <- mu[i] #+ rho * epsilon[i]
Y[i] <- rnorm(1, m[i], sqrt(1/prec))
}
list(Y = Y, Treat = Treat, Time = Time, knots = knots, nobs = nobs, BS = BS)
})
}
nof1.poisson.simulation <- function(baseline = "baseline", knots = 126.5, Base.size = 14, Treat.size = 56,
rho = 0.5, prec = 5, alpha = 1, beta_A = 1, beta_B = 2,
gamma = c(0.5,0,-0.5,0.1)){
store <- generate_time(baseline, knots, Base.size, Treat.size)
with(store, {
Y <- epsilon <- mu <- rep(NA, nobs)
for(i in 1:nobs){
# if(i == 1){
#   epsilon[1] <- rnorm(1, 0, sqrt(1/ ((1-rho^2) * prec)) )
# } else{
#   epsilon[i] <- rnorm(1, rho * epsilon[i-1], sqrt(1/prec))
# }
mu[i] <- alpha #+ epsilon[i]
if(baseline %in% Treat){
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
} else if (Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
} else{
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
}
# if(!is.null(knots)){
#   mu[i] <- mu[i] + BS[i,] %*% gamma
# }
Y[i] <- rpois(1, exp(mu[i]))
}
list(Y = Y, Treat = Treat, Time = Time, knots = knots, nobs = nobs, BS = BS)
})
}
nof1.binomial.simulation <- function(baseline = "baseline", knots = 126, Base.size = 14, Treat.size = 56,
rho = 0, prec = 1, alpha = 0.5, beta_A = 0.5, beta_B = 1,
gamma = c(1,0,-1,0.1)){
store <- generate_time(baseline, knots, Base.size, Treat.size)
with(store, {
Y <- epsilon <- mu <- p <- rep(NA, nobs)
for(i in 1:nobs){
# if(i == 1){
#   epsilon[1] <- rnorm(1, 0, sqrt(1/ ((1-rho^2) * prec)))
# } else{
#   epsilon[i] <- rnorm(1, rho * epsilon[i-1], sqrt(1/prec))
# }
mu[i] <- alpha #+ epsilon[i]
if(baseline %in% Treat){
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
} else if (Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
} else{
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
}
# if(!is.null(knots)){
#   mu[i] <- mu[i] + BS[i,] %*% gamma
# }
Y[i] <- rbinom(1,1, inv_logit(mu[i]))
}
list(Y = Y, Treat = Treat, Time = Time, knots = knots, nobs = nobs, BS = BS, epsilon = epsilon)
})
}
nof1.ordinal.simulation <- function(baseline = "baseline", knots = 126, Base.size = 14, Treat.size = 56,
rho = 0.3, prec = 5, beta_A = 0.5, beta_B = 1, cut = c(0.5,1,1.5,2),
ncat = 5, gamma = c(-4,-2,-3,-5)){
store <- generate_time(baseline, knots, Base.size, Treat.size)
with(store, {
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
# if(i == 1){
#   epsilon[1] <- rnorm(1, 0, sqrt(1/ ((1-rho^2) * prec)))
# } else{
#   epsilon[i] <- rnorm(1, rho * epsilon[i-1], sqrt(1/prec))
# }
mu[i] <- 0 #epsilon[i]
if(baseline %in% Treat){
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
} else if (Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
} else{
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
}
# if(!is.null(knots)){
#   mu[i] <- mu[i] + BS[i,] %*% gamma
# }
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat, Time = Time, knots = knots, nobs = nobs, BS = BS)
})
}
#input data generation
generate_data <- function(){
treatment <- c(rep("baseline", 2), rep("strict", 8), rep("liberalized", 8), rep("strict", 8), rep("liberalized", 8))
stool_consistency <- nof1.binomial.simulation()$Y
stool_frequency <- nof1.poisson.simulation()$Y
pain_interference <- nof1.normal.simulation()$Y
gi_symptoms <- nof1.normal.simulation()$Y
stool_consistency2 <- nof1.binomial.simulation()$Y
stool_frequency2 <- nof1.poisson.simulation()$Y
pain_interference2 <- nof1.normal.simulation()$Y
gi_symptoms2 <- nof1.normal.simulation()$Y
final <- list()
for(i in 1:(2+8*4)){
treatment_specific = treatment[i]
stool_consistency_changed <- stool_consistency[((i-1)*7+1):(i*7)]
stool_consistency_changed <- ifelse(stool_consistency_changed == 1, 7, 2)
parent_response = list(daily_stool_consistency = stool_consistency_changed,
daily_stool_frequency =  stool_frequency[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms[i])
)
stool_consistency2_changed <- stool_consistency2[((i-1)*7+1):(i*7)]
stool_consistency2_changed <- ifelse(stool_consistency2_changed == 1, 7, 2)
child_response = list(daily_stool_consistency = stool_consistency2_changed,
daily_stool_frequency =  stool_frequency2[((i-1)*7+1):(i*7)],
promis_pain_interference = list("t-score" = pain_interference2[i]),
promis_gi_symptoms = list("t-score" = gi_symptoms2[i])
)
final[[i]] <- list(treatment = treatment_specific, parent_response = parent_response, child_response = child_response)
}
final2 <- list(data = final, metadata = list(user_id = 300000, user_age = 15, trial_start_date = "2017-01-01", trial_end_date = "2017-08-26"))
output <- toJSON(final2, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE)
return(output)
}
a <- generate_data()
a
remove(list = ls())
library(nof1)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
library(nof1)
library(nof1)
