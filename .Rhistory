proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,20000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,2000000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,2000000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,4000000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,20000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
library(pbapply)
rm(list = ls())
gc()
currpath <- dirname(rstudioapi::callFun("getActiveDocumentContext")$path)
runCBCmodel_path <-paste(currpath,"/CBCmodel_test_nocheck_08092017_newassumptions_LR10_LR20.R",sep="")
source(runCBCmodel_path)
lengthx <- 5
pLR_Ineg_40 <- seq(0.001,0.1,length.out = lengthx)
LR10_20 <- seq(1,2,length.out = lengthx)
pwell_mets <- seq(0.001,0.1,length.out = lengthx)
pLRmets_neg_10 <- seq(0.001,0.2,length.out = lengthx)
pLRmets_neg_20 <- seq(0.001,0.2,length.out = lengthx)
#creat grid
params <- expand.grid(pLR_Ineg_40,LR10_20,pwell_mets,pLRmets_neg_10,pLRmets_neg_20)
ptm <- proc.time()
CBCmodel_run(1,20000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,20000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
library(pbapply)
rm(list = ls())
gc()
currpath <- dirname(rstudioapi::callFun("getActiveDocumentContext")$path)
runCBCmodel_path <-paste(currpath,"/CBCmodel_test_nocheck_08092017_newassumptions_LR10_LR20.R",sep="")
source(runCBCmodel_path)
target1<-read.csv("OS_stageIERneg40white2.csv")
#params for calibration
#define min and max values
###########################################
# pLR_Ineg_40 <- 0.0015 params[1]
# LR10_20 <- 1.012 params[2]
# pwell_mets <- 0.01 params[3]
# pLRmets_neg_10 <- 0.069 params[4]
# pLRmets_neg_20 <- 0.074 params[5]
###########################################
lengthx <- 5
pLR_Ineg_40 <- seq(0.001,0.1,length.out = lengthx)
LR10_20 <- seq(1,2,length.out = lengthx)
pwell_mets <- seq(0.001,0.1,length.out = lengthx)
pLRmets_neg_10 <- seq(0.001,0.2,length.out = lengthx)
pLRmets_neg_20 <- seq(0.001,0.2,length.out = lengthx)
#creat grid
params <- expand.grid(pLR_Ineg_40,LR10_20,pwell_mets,pLRmets_neg_10,pLRmets_neg_20)
ptm <- proc.time()
CBCmodel_run(1,20000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,200000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
ptm <- proc.time()
CBCmodel_run(1,2000000,40,1,0,4,1,unlist(params[1,]))
ptm <- proc.time()
CBCmodel_run(1,2000000,40,1,0,4,1,unlist(params[1,]))
proc.time() - ptm
help(microbenchmark)
library(microbenchmark)
help(microbenchmark)
microbenchmark(
CBCmodel_run(1,2000000,40,1,0,4,1,unlist(params[1,]))
)
microbenchmark(
CBCmodel_run(1,2000000,40,1,0,4,1,unlist(params[1,])), times = 10L
)
help(jags.model)
library(jags)
library(rjags)
help(jags.model)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
librarY(devtools)
library(devtools)
has_devel()
library(nof1)
nof1
library(nof1)
library(Nof1)
library(Nof1)
library(jsonlite)
library(nof1)
json.file <- fromJSON("sample input.json")
#json.file <- fromJSON("sample input-small.json")
#json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
library(devtools)
install_github("MikeJSeo/nof1")
library(jsonlite)
library(nof1)
json.file <- fromJSON("sample input.json")
#json.file <- fromJSON("sample input-small.json")
#json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
json.file <- fromJSON("sample input.json")
library(jsonlite)
library(nof1)
json.file <- fromJSON("sample input.json")
getwd()
setwd("C:/Users/Michael Seo/Desktop/GitHub/nof1")
library(jsonlite)
library(nof1)
json.file <- fromJSON("sample input.json")
#json.file <- fromJSON("sample input-small.json")
#json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
json.file <- fromJSON("sample input-small.json")
#json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
library(jsonlite)
library(nof1)
#json.file <- fromJSON("sample input.json")
#json.file <- fromJSON("sample input-small.json")
json.file <- fromJSON("sample input-inverse relationship.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
json.file <- fromJSON("sample input-missing baseline.json")
result <- do.call(wrap, json.file)
library(jsonlite)
library(nof1)
#json.file <- fromJSON("sample input.json")
#json.file <- fromJSON("sample input-small.json")
json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
library(jsonlite)
library(nof1)
#json.file <- fromJSON("sample input.json")
json.file <- fromJSON("sample input-small.json")
#json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
library(nof1)
library(jsonlite)
library(nof1)
#json.file <- fromJSON("sample input.json")
json.file <- fromJSON("sample input-small.json")
#json.file <- fromJSON("sample input-missing baseline.json")
#json.file <- fromJSON("sample input-no mscd.json")
#json.file <- fromJSON("sample input-no scd.json")
result <- do.call(wrap, json.file)
output <- toJSON(result, pretty = TRUE, UTC = TRUE, auto_unbox = TRUE, na = NULL)
output
data <- json.file$data
metadata <- json.file$metadata
read_data <- tryCatch({
read_dummy <- read_input_data(data, metadata)
if(length(rle(read_dummy$Treatment)$lengths) > 1) read_dummy <- washout(read_dummy)
read_dummy
}, error = function(error){
return(paste("input read error: ", error))
})
data_pain <- list(Treat = read_data$Treatment_weekly, Y = read_data$pain_interference)
nof1_pain <- with(data_pain, {
nof1.data(Y, Treat, response = "normal")
})
read_data
washout <- function(read_data){
with(read_data,{
change_point <- cumsum(rle(Treatment)$lengths)
change_point <- change_point[-length(change_point)]
delete_obs_daily <- NULL
for(i in 1:length(change_point)){
delete_obs_daily <- c(delete_obs_daily, (change_point[i]+1):(change_point[i]+7))
}
delete_obs_daily
change_point2 <- cumsum(rle(Treatment_weekly)$lengths)
change_point2 <- change_point2[-length(change_point2)]
delete_obs_weekly <- NULL
for(i in 1:length(change_point2)){
delete_obs_weekly <- c(delete_obs_weekly, (change_point2[i]+1))
}
delete_obs_weekly
stool_consistency[delete_obs_daily] <- NA
stool_frequency[delete_obs_daily] <- NA
pain_interference[delete_obs_weekly] <- NA
gi_symptoms[delete_obs_weekly] <- NA
list(Treatment = Treatment, Treatment_weekly = Treatment_weekly, stool_consistency = stool_consistency, stool_frequency = stool_frequency, pain_interference = pain_interference, gi_symptoms = gi_symptoms)
})
}
read_data <- tryCatch({
read_dummy <- read_input_data(data, metadata)
if(length(rle(read_dummy$Treatment)$lengths) > 1) read_dummy <- washout(read_dummy)
read_dummy
}, error = function(error){
return(paste("input read error: ", error))
})
read_data
data_pain <- list(Treat = read_data$Treatment_weekly, Y = read_data$pain_interference)
nof1_pain <- with(data_pain, {
nof1.data(Y, Treat, response = "normal")
})
nof1_pain
cat(nof1$code)
cat(nof1_pain$code)
data_pain
Y <- c(49.9243, NA, 49.8030, 47.8000, NA, NA, 49.8121, NA)
#Treatment:  "baseline" "A"        "A"        "A"        "A"        "B"        "B"        "B"
Treat_A <- c(0, 1, 1, 1, 1, 0, 0, 0)
Treat_B <- c(0, 0, 0, 0, 0, 1, 1, 1)
data_pain <- list(Y = Y, Treat_A= Treat_A, Treat_B = Treat_B)
model_string <- "model{
for (i in 1:8) {
m[i] <- mu[i] #+ rho * epsilon[i]
mu[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
#e0 ~ dnorm(0, (1-rho^2)*prec)
#epsilon[1] <- e0
#for(i in 2:8){
#epsilon[i] <- Y[i-1] - mu[i-1]
#}
alpha ~ dnorm(0,0.001)
#rho ~ dunif(-1,1)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd ~ dunif(0, 20)
prec <- pow(sd,-2)
logprec <- log(prec)
}"
model <- jags.model(textConnection(model_string),
data = data_pain)
library(rjags)
model <- jags.model(textConnection(model_string),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000, progress.bar="none")
model <- jags.model(textConnection(model_string),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
samp
summary(samp)
samp[,"beta_A"]
mean(samp[,"beta_A"])
str(samp[,"beta_A"])
unlist(samp[,"beta_A"])
mean(unlist(samp[,"beta_A"]))
coef <- apply(samples[,c("beta_A","beta_B"), drop = F], 2, mean)
coef <- apply(samp[,c("beta_A","beta_B"), drop = F], 2, mean)
samp
samp
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
coef
round(
c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 1)
library(rjags)
Y <- c(49.9243, NA, 49.8030, 47.8000, NA, NA, 49.8121, NA)
Treat <-  c("baseline", "A", "A", "A", "A", "B", "B", "B")
Treat_A <- c(0, 1, 1, 1, 1, 0, 0, 0)
Treat_B <- c(0, 0, 0, 0, 0, 1, 1, 1)
data_pain <- list(Y = Y, Treat_A= Treat_A, Treat_B = Treat_B)
model_string <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd ~ dunif(0, 20)
prec <- pow(sd,-2)
}"
model <- jags.model(textConnection(model_string),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
c(mean(Y[Treat == baseline], na.rm = TRUE), mean(Y[Treat == "A"], na.rm = TRUE), mean(Y[Treat == "B"], na.rm = TRUE))
c(mean(Y[Treat == "baseline"], na.rm = TRUE), mean(Y[Treat == "A"], na.rm = TRUE), mean(Y[Treat == "B"], na.rm = TRUE))
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 1)
c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 1)
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3], 2)
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
model_string2 <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd <- pow(prec, -0.5)
prec ~ dgamma(1, 0.001)
}"
model <- jags.model(textConnection(model_string2),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
library(rjags)
Y <- c(49.9243, NA, 49.8030, 47.8000, NA, NA, 49.8121, NA)
Treat <-  c("baseline", "A", "A", "A", "A", "B", "B", "B")
Treat_A <- c(0, 1, 1, 1, 1, 0, 0, 0)
Treat_B <- c(0, 0, 0, 0, 0, 1, 1, 1)
data_pain <- list(Y = Y, Treat_A= Treat_A, Treat_B = Treat_B)
model_string <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd ~ dunif(0, 20)
prec <- pow(sd,-2)
}"
model <- jags.model(textConnection(model_string),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
model_string2 <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd <- pow(prec, -0.5)
prec ~ dgamma(1, 0.001)
}"
model <- jags.model(textConnection(model_string2),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
library(rjags)
Y <- c(49.9243, NA, 49.8030, 47.8000, NA, NA, 49.8121, NA)
Treat <-  c("baseline", "A", "A", "A", "A", "B", "B", "B")
Treat_A <- c(0, 1, 1, 1, 1, 0, 0, 0)
Treat_B <- c(0, 0, 0, 0, 0, 1, 1, 1)
data_pain <- list(Y = Y, Treat_A= Treat_A, Treat_B = Treat_B)
model_string <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd ~ dunif(0, 20)
prec <- pow(sd,-2)
}"
model <- jags.model(textConnection(model_string),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
remove(list = ls())
#data
library(rjags)
Y <- c(49.9243, NA, 49.8030, 47.8000, NA, NA, 49.8121, NA)
Treat <-  c("baseline", "A", "A", "A", "A", "B", "B", "B")
Treat_A <- c(0, 1, 1, 1, 1, 0, 0, 0)
Treat_B <- c(0, 0, 0, 0, 0, 1, 1, 1)
data_pain <- list(Y = Y, Treat_A= Treat_A, Treat_B = Treat_B)
#####################
model_string <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd ~ dunif(0, 20)
prec <- pow(sd,-2)
}"
model <- jags.model(textConnection(model_string),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
#################################################
########### gamma prior
model_string2 <- "model{
for (i in 1:8) {
m[i] <- alpha + beta_A*Treat_A[i] + beta_B*Treat_B[i]
Y[i] ~ dnorm(m[i], prec)
}
alpha ~ dnorm(0,0.001)
beta_A ~ dnorm(0,0.001)
beta_B ~ dnorm(0,0.001)
sd <- pow(prec, -0.5)
prec ~ dgamma(1, 0.001)
}"
model <- jags.model(textConnection(model_string2),
data = data_pain)
samp <- coda.samples(model,
variable.names=c("beta_A", "beta_B", "alpha", "sd"), n.iter=20000)
coef <- apply(samp[[1]][,c("beta_A","beta_B"), drop = F], 2, mean)
raw <- c(base = mean(Y[Treat == "baseline"], na.rm = TRUE), scd = mean(Y[Treat == "A"], na.rm = TRUE), mscd = mean(Y[Treat == "B"], na.rm = TRUE))
#model estimated difference
round(c(base_vs_scd = as.numeric(coef["beta_A"]),
base_vs_mscd = as.numeric(coef["beta_B"]),
mscd_Vs_scd = as.numeric(coef["beta_A"] - coef["beta_B"])), 2)
#raw difference
round(c(base_vs_scd = raw[2] - raw[1],
base_vs_mscd = raw[3] - raw[1],
mscd_Vs_scd = raw[2] - raw[3]), 2)
